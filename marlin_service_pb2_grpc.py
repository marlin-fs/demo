# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import marlin_service_pb2 as marlin__service__pb2


class MarlinServiceStub(object):
    """service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IngestRequest = channel.unary_unary(
                '/com.marlin.api.MarlinService/IngestRequest',
                request_serializer=marlin__service__pb2.IngestionMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.FeatureGroupRegistration = channel.unary_unary(
                '/com.marlin.api.MarlinService/FeatureGroupRegistration',
                request_serializer=marlin__service__pb2.FeatureGroupDefinition.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.FeatureRequest = channel.unary_unary(
                '/com.marlin.api.MarlinService/FeatureRequest',
                request_serializer=marlin__service__pb2.FeatureRequestDetails.SerializeToString,
                response_deserializer=marlin__service__pb2.FeatureResult.FromString,
                )
        self.FeatureGroupDefinitionRequest = channel.unary_unary(
                '/com.marlin.api.MarlinService/FeatureGroupDefinitionRequest',
                request_serializer=marlin__service__pb2.FeatureGroupDefinitionRequestDetails.SerializeToString,
                response_deserializer=marlin__service__pb2.FeatureGroupDefinition.FromString,
                )
        self.ListFeatureGroups = channel.unary_unary(
                '/com.marlin.api.MarlinService/ListFeatureGroups',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=marlin__service__pb2.FeatureGroupsResult.FromString,
                )


class MarlinServiceServicer(object):
    """service definition
    """

    def IngestRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureGroupRegistration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureGroupDefinitionRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFeatureGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarlinServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IngestRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestRequest,
                    request_deserializer=marlin__service__pb2.IngestionMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FeatureGroupRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureGroupRegistration,
                    request_deserializer=marlin__service__pb2.FeatureGroupDefinition.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FeatureRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureRequest,
                    request_deserializer=marlin__service__pb2.FeatureRequestDetails.FromString,
                    response_serializer=marlin__service__pb2.FeatureResult.SerializeToString,
            ),
            'FeatureGroupDefinitionRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureGroupDefinitionRequest,
                    request_deserializer=marlin__service__pb2.FeatureGroupDefinitionRequestDetails.FromString,
                    response_serializer=marlin__service__pb2.FeatureGroupDefinition.SerializeToString,
            ),
            'ListFeatureGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFeatureGroups,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=marlin__service__pb2.FeatureGroupsResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.marlin.api.MarlinService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarlinService(object):
    """service definition
    """

    @staticmethod
    def IngestRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.marlin.api.MarlinService/IngestRequest',
            marlin__service__pb2.IngestionMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeatureGroupRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.marlin.api.MarlinService/FeatureGroupRegistration',
            marlin__service__pb2.FeatureGroupDefinition.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeatureRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.marlin.api.MarlinService/FeatureRequest',
            marlin__service__pb2.FeatureRequestDetails.SerializeToString,
            marlin__service__pb2.FeatureResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeatureGroupDefinitionRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.marlin.api.MarlinService/FeatureGroupDefinitionRequest',
            marlin__service__pb2.FeatureGroupDefinitionRequestDetails.SerializeToString,
            marlin__service__pb2.FeatureGroupDefinition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFeatureGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.marlin.api.MarlinService/ListFeatureGroups',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            marlin__service__pb2.FeatureGroupsResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
